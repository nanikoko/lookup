package kr.or.ddit.controller;

import java.io.File;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.annotation.MultipartConfig;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.servlet.http.Part;

import kr.or.ddit.service.IMemberService;
import kr.or.ddit.service.MemberServiceImpl;
import kr.or.ddit.vo.MemberVO;

/**
 * Servlet implementation class MemberUpdate
 */
@WebServlet("/MemberUpdate.do")
@MultipartConfig
public class MemberUpdate extends HttpServlet {
	private static final long serialVersionUID = 1L;

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		response.getWriter().append("Served at: ").append(request.getContextPath());
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// 사용자가 업로드한 파일이 저장될 서버쪽의 폴더 경로 설정
				//String uploadPath = applicationPath + File.separator + UPLOAD_DIR;
				String uploadPath = "D:\\D_Other\\uploadedFiles";

				// 저장될 폴더가 없으면 생성한다.
				File fileUploadDir = new File(uploadPath);
				if (!fileUploadDir.exists()) {
					fileUploadDir.mkdirs();
				}
				
				request.setCharacterEncoding("utf-8");
				String memId = request.getParameter("mem_id");
				String memName = request.getParameter("mem_name");
				String memNicname=request.getParameter("mem_nickname");
				String memPass = request.getParameter("mem_pass");
				String memTel = request.getParameter("mem_tel");
				String memAddr1 = request.getParameter("mem_addr1");
				String memAddr2 = request.getParameter("mem_addr2");
				String memAddr3 = request.getParameter("mem_addr3");
				String old_photo = request.getParameter("old_photo");
				
				MemberVO memVo = new MemberVO();
				memVo.setMem_id(memId);
				memVo.setMem_pass(memPass);
				memVo.setMem_name(memName);
				memVo.setMem_nickname(memNicname);
				memVo.setMem_tel(Integer.parseInt(memTel));
				memVo.setMem_addr1(memAddr1);
				memVo.setMem_addr2(memAddr2);
				memVo.setMem_addr3(memAddr3);
				memVo.setMem_photo(old_photo);  // 일단 이전 프로필사진으로 셋팅한다.
				
				// form의 file입력 요소의 name값을 이용하여 Part객체 구하기
				Part part = request.getPart("mem_photo");
				
				if(part != null) {
					String photo = extractFileName(part);
					if(!"".equals(photo)) {
						try {
							part.write(uploadPath + File.separator + photo);
							memVo.setMem_photo(photo);  // 수정파일이 있으면 수정파일로 셋팅
						}catch(IOException e) {
							//memVo.setMem_photo(null);
						}
					}
						
				}
				
				IMemberService service = MemberServiceImpl.getInstance();
				
				
				int cnt = service.updateMember(memVo);
				     MemberVO vo=service.memberIdSearch(memId);
				         HttpSession session=request.getSession();
				         session.setAttribute("loginMember", vo);
				response.sendRedirect( request.getContextPath() + "/membermypage/mypageMenue.jsp" );
				
			}


			private String extractFileName(Part part) {
				String fileName = ""; 
				String contentDisposition = part.getHeader("Content-Disposition");
				String[] items = contentDisposition.split(";");
				for (String item : items) {
					if (item.trim().startsWith("filename")) {
						fileName = item.substring(item.indexOf("=") + 2, item.length() - 1);
					}
				}
				return fileName;
			}
	}


